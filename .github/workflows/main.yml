name: Build

on: [push]

jobs:
  build:
    permissions:
      contents: write 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
        arch: [amd64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
        # os: [ubuntu-latest]
        # arch: [amd64, arm64]
        # os: [windows-latest]
        # arch: [amd64]
    
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Build Windows exe
      if: startsWith(matrix.os, 'windows')
      env:
        UPX_PATH: C:\upx\upx.exe
      
      run: |
        # Install PyInstaller and upx
        pip install pyinstaller
        choco install upx
        
        # Build executable
        pyinstaller -n pvw_py --onefile --distpath . main.py

    - name: Install upx and shc for macOS
      if: startsWith(matrix.os, 'macOS')
      run: |
        brew install shc
        brew install upx

    - name: Install upx and shc for Ubuntu
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y upx-ucl shc

    - name: Build Linux and macOS exe
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macOS')
      env:
        UPX_PATH: /usr/local/bin/upx
      run: |
        # Install PyInstaller and upx
        pip3 install pyinstaller
        
        # Build executable
        pyinstaller --onefile main.py --distpath . -n pvw_py

    - name: Build Windows ps1 to exe
      if: startsWith(matrix.os, 'windows')
      shell: powershell
      run: |
        # install ps2exe
        Install-Module -Name ps2exe -Force
        import-module -Name ps2exe
        Invoke-PS2EXE -inputFile pvw.ps1 -outputFile pvw.exe

    - name: Build Linux/macOS sh to exe
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macOS')
      run: |      
        # Build executable
        shc -f pvw.sh -o pvw

    - name: Create archive for Windows
      if: startsWith(matrix.os, 'windows')
      run: |
        # Install zip
        choco install zip
        # Create zip archive
        zip -r pvw.zip pvw_py.exe pvw.exe

    - name: Create archive for Linux and macOS
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macOS')
      run: |
        tar -czvf pvw.tar.gz pvw_py pvw

    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        tag_name: v0.0.2 # Replace with your program's version number
        allowUpdates: true
        release_name: Release v0.0.2 # Replace with your release name
        body: |
          Release v0.0.2
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: |
          # Upload the correct file based on the operating system and architecture
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo pvw.zip
          else
            echo pvw.tar.gz
          fi
        asset_name: |
          # Set the asset name based on the operating system and architecture
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo pvw_windows_${{ matrix.arch }}.zip
          else
            echo pvw_${{ matrix.os }}_${{ matrix.arch }}.tar.gz
          fi
        asset_content_type: application/octet-stream
